/*******************************************************************************
 * GBuffer.ubo
 *------------------------------------------------------------------------------
 * Not technically a ubo - but there is no clean way to bind the GBuffer.
 ******************************************************************************/

#ifndef   GBUFFER_UBO
#define   GBUFFER_UBO

#include <Math.glsl>
#include <EncodeDecode.glsl>
#include <Bindings.glsl>

layout(binding = K_DEPTH_TEXTURE_BINDING)
uniform highp sampler2D depthTexture;
layout(binding = K_GEOMETRY_TEXTURE_BINDING)
uniform highp sampler2D geometryTexture;
layout(binding = K_MATERIAL_TEXTURE_BINDING)
uniform highp sampler2D materialTexture;
layout(binding = K_PHYSICAL_TEXTURE_BINDING)
uniform highp sampler2D physicalTexture;
layout(binding = K_SURFACE_TEXTURE_BINDING)
uniform highp sampler2D surfaceTexture;
layout(binding = K_LIGHT_BUFFER_TEXTURE_BINDING)
uniform highp sampler2D lightbufferTexture;

highp float depth(highp vec2 uv)
{
  return texture(depthTexture, uv).r;
}

highp float depth()
{
  return depth(uvCoord());
}

highp float linearDepth(highp vec2 uv)
{
  return linearizeDepth(depth(uv));
}

highp float linearDepth()
{
  return linearDepth(uvCoord());
}

highp vec3 clipPosition(vec2 uv)
{
  return vec3(uv * 2.0 - 1.0, depth(uv) * 2.0 - 1.0);
}

highp vec3 clipPosition()
{
  return clipPosition(uvCoord());
}

highp vec3 viewPosition(vec2 uv)
{
  highp vec4 clipPos = vec4(clipPosition(uv), 1.0);
  highp vec4 viewPos = Current.PerspToView * clipPos;
  return (viewPos.xyz / viewPos.w);
}

highp vec3 viewPosition()
{
  return viewPosition(uvCoord());
}

highp vec3 worldPosition(vec2 uv)
{
  highp vec4 clipPos = vec4(clipPosition(uv), 1.0);
  highp vec4 worldPos = Current.PerspToWorld * clipPos;
  return (worldPos.xyz / worldPos.w);
}

highp vec3 worldPosition()
{
  return worldPosition(uvCoord());
}

highp vec3 normal(highp vec2 uv)
{
  return decodeNormal(texture(geometryTexture, uv).xy);
}

highp vec3 normal()
{
  return normal(uvCoord());
}

highp vec3 diffuse(highp vec2 uv)
{
  return texture(materialTexture, uv).xyz;
}

highp vec3 diffuse()
{
  return diffuse(uvCoord());
}

highp vec4 specular(highp vec2 uv)
{
  highp vec3 specColor = decodeSpecularColor(texture(materialTexture, uv).w);
  highp float specExponent = decodeSpecularExponent(texture(surfaceTexture, uv).r);
  return vec4(specColor, specExponent);
}

highp vec4 specular()
{
  return specular(uvCoord());
}

highp vec2 velocity(highp vec2 uv)
{
  return texture(geometryTexture, uv).zw;
}

highp vec2 velocity()
{
  return velocity(uvCoord());
}

highp vec3 fresnel(highp vec2 uv)
{
  return texture(physicalTexture, uv).xyz;
}

highp vec3 fresnel()
{
  return fresnel(uvCoord());
}

highp float roughness(highp vec2 uv)
{
  return texture(physicalTexture, uv).w;
}

highp float roughness()
{
  return roughness(uvCoord());
}

highp vec4 lightbuffer(highp vec2 uv)
{
  return texture(lightbufferTexture, uv);
}

highp vec4 lightbuffer()
{
  return lightbuffer(uvCoord());
}

#endif // GBUFFER_UBO
