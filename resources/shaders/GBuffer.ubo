/*******************************************************************************
 * GBuffer.ubo
 *------------------------------------------------------------------------------
 * Not technically a ubo - but there is no clean way to bind the GBuffer.
 ******************************************************************************/

#ifndef   GBUFFER_UBO
#define   GBUFFER_UBO

#include <Math.glsl>
#include <EncodeDecode.glsl>

uniform sampler2D geometryTexture;
uniform sampler2D materialTexture;
uniform sampler2D surfaceTexture;
uniform sampler2D backbufferTexture;
uniform sampler2D lightbufferTexture;
uniform sampler2D depthTexture;

float depthCoord(vec2 uv)
{
  return texture2D(depthTexture, uv).r;
}

float depth()
{
  return depthCoord(uvCoord());
}

float linearDepthCoord(vec2 uv)
{
  return linearizeDepth(depthCoord(uv));
}

float linearDepth()
{
  return linearDepthCoord(uvCoord());
}

vec3 clipPositionCoord(vec2 uv)
{
  return vec3(uv * 2.0 - 1.0, depthCoord(uv) * 2.0 - 1.0);
}

vec3 clipPosition()
{
  return clipPositionCoord(uvCoord());
}

vec3 viewPositionCoord(vec2 uv)
{
  vec4 clipPos = vec4(clipPositionCoord(uv), 1.0);
  vec4 viewPos = clipToView * clipPos;
  return (viewPos.xyz / viewPos.w);
}

vec3 viewPosition()
{
  return viewPositionCoord(uvCoord());
}

vec3 worldPositionCoord(vec2 uv)
{
  vec4 clipPos = vec4(clipPositionCoord(uv), 1.0);
  vec4 worldPos = clipToWorld * clipPos;
  return (worldPos.xyz / worldPos.w);
}

vec3 worldPosition()
{
  return worldPositionCoord(uvCoord());
}

vec3 normalCoord(vec2 uv)
{
  return decodeNormal(texture2D(geometryTexture, uv).xy);
}

vec3 normal()
{
  return normalCoord(uvCoord());
}

vec3 diffuseCoord(vec2 uv)
{
  return texture2D(materialTexture, uv).xyz;
}

vec3 diffuse()
{
  return diffuseCoord(uvCoord());
}

vec4 specularCoord(vec2 uv)
{
  float specColor = texture2D(materialTexture, uv).z;
  float specExponent = texture2D(surfaceTexture, uv).w;
  return vec4(specColor, specColor, specColor, specExponent);
}

vec4 specular()
{
  return specularCoord(uvCoord());
}

vec2 velocityCoord(vec2 uv)
{
  return texture2D(geometryTexture, uv).zw;
}

vec2 velocity()
{
  return velocityCoord(uvCoord());
}

vec4 backbufferCoord(vec2 uv)
{
  return texture2D(backbufferTexture, uv);
}

vec4 backbuffer()
{
  return backbufferCoord(uvCoord());
}

vec4 lightbufferCoord(vec2 uv)
{
  return texture2D(lightbufferTexture, uv);
}

vec4 lightbuffer()
{
  return lightbufferCoord(uvCoord());
}

#endif // GBUFFER_UBO
